Vue.js

Teoria

VueJs actua como intermediario entre el codigo html original y el mostrado en pantalla, vue genera una plantilla a partir del codigo html original, la renderiza y es lo que muestra el navegador.
Si inspeccionamos una pagina web de VueJs no veremos el codigo html de desarrollo si no el interpretado y generado por Vue

VueJS solo permite renderizar texto, no permite renderizar elementos html. Con esto evitamos los ataques cross site scripting por los que nos pueden añadir codigo a la pagina html.

Html

	+	{{ }} -> Dentro se indica el elemento de data al que se quiere acceder.
				 Tambien puede acceder a los elementos de methods llamandolos con () al final. Se pueden llamar metodos los cuales devuelvan un string
				 Solo se pueden utilizar en sitios donde se pueda escribir un tag, no se puede utilizar en elementos html como "href", o "name"
	+	v-on (se puede usar @)-> Instruccion que alerta a Vue de que tiene que saltar un evento
		-	:****="" -> Se añade los dos puntos y el tipo de elemento sobre el que tiene que saltar la accion y se indica el nombre del metodo que controlara el evento
	+	v-bind (se puede usar :) -> Indica que el siguiente elemento html no debe ser tratado de forma directa si no que tiene que interpretarlo vue, de esta manera podremos llamar a elementos de la instancia de Vue
				  sin necesidad de utilizar {{ }}
		-	:href="" -> Para añadir un enlace
	+	v-once -> Hace que el elemento entre {{ }} no vuelva a ser renderizado en pantalla en caso de que sufra algun cambio en el codigo, de tal manera podremos con una variable mostrar dos valores
	+	v-html -> Para poder añadir codigo html dinamicamente, hay que utilizarlo con cuidado ya que nos exponemos a ataques cross site scripting
	+	Vue permite añadir codigo javascript directamente en la plantilla
	+	Para tratar una clase css con codigo javascript vue, se tiene que marcar como :class="", dentro se indicara con codigo javascript la clase css y se indicara la variable de data asociada a esta clase
			:class="{claseCss: atributoData}"
		Si se quiere simplificar el codigo html, se puede crear un objeto (computedPropertie) que tenga la logica de las clases css y llamar directamente a este objeto
		Otra forma de cambiar la clase css dinamicamente es mediante un input, vinculamos una variable de vue al valor de un input y a su vez esta variable la usamos como nombre de la clase css. De tal manera que si
			cambiamos el valor del imput cambiara la clase css. Se puede combinar con el codigo javascript, el codigo dara prioridad a la condicion de la izquierda y en caso de no cumplirse seguira con la siguiente.
		No es necesario aplicar estos valores a la clases css, podemos aplicarlos a una propiedad css concreta con el campo :style
		Si anidamos propiedades en un string aplicara cada una de ellas.
	+	v-if="variable" -> Utiliza una variable boolean del data para decidir si adjunta el elemento al html o no, no lo deja invisible o deshabilitado, si la variable es falsa el elemento no estara en el DOM
	+	v-else -> Trabaja en funcion del elemento v-if predecesor y actua exactamente igual que el v-if. A partir de la version 2.1 esta disponible la directiva v-else-if
		El condicional se puede utilizar en un elemento div de tal forma que no muestre nada del interior de este, tambien existe a partir de html5 el elemento template el cual no es visible al inspeccionar el DOM
	+	v-show="variable" -> Trabaja igual que v-if pero en este caso el elemento no desaparece del DOM simplemente se oculta añadiendole el estilo css "display: none;"
	+	v-for -> Esta instruccion añadida en el elemento <li> de una lista html, nos permite iterar entre los valores de una variable de data de javascript, para ello usaremos la siguiente sitaxis:
			<li v-for="variable in lista">{{ variable }}</li>
		Si queremos acceder al indice de la variable debemos cambiar la sintaxis
			<li v-for="(variable, indice) in ingredients">{{ ingredient }} ({{ i }})</li> -> Es importante el orden siempre debe ir primero el valor de la variable y despues el indice
		Podemos utilizar la sintaxis v-for dentro de un elemento template html y si llamamos a las variables dentro nos generara tantas como elementos tenga la lista
		Tambien se puede utilizar el v-for para iterar entre una lista de objetos, con la misma sintaxis. Si queremos acceder a los valores de estos objetos deberemos anidar dos v-for
			<li v-for="objeto in objetos">
				<div v-for="(valor, key, index) in objeto>{{ key }}: {{ value }} ({{ index }})</div>
			</li> -> En este caso el orden tambien es importante, siempre debe ser valor, clave, indice
		Por ultimo tambien podemos iterar entre una lista de numeros con la sintaxis:
			<div v-for="variable in 10">{{ variable }}</div> -> El numero que se indica es el valor hasta el que se debe iterar
		Al trabajar con las listas creadas por el comando v-for, solo tendra en cuenta el indice de los elementos de tal manera que si intentamos reordenar es posible que chafe los valores de las posiciones en lugar de
		mover los elementos de tal manera que puede causar problemas. Para evitar esto hay que añadir una clave unica a los elementos de la lista, la sintaxis para realizar esto es:
			v-for="(ingredient, i) in ingredients" :key="ingredient" -> Esta key servira para mover el elemento al completo en caso de trabajar con la lista

Javascript

new Vue({
	el: -> hace referencia al "id" del elemento sobre el que se va a trabajar
	data: -> Informacion a utilizar en ese elemento
	methods: -> Dentro de este apartado se definen los metodos llamados desde html
		- para acceder a un elemento de data se utilizara this.nombreCampo
}) -> Instancia objeto Vue que controlara el javascript

	* Eventos
		- En la parte javascript se declaran los metodos que saltaran al ser escuchados por el comando v-on en el html. Todos los metodos pueden tener el parametro event, que recogera datos del objeto que lanza el evento.
		
		- Si queremos pasar un argumento propio se utiliara la nomenclatura "metodo(argumento, $event)" en el html, de esta manera estamos pasando nuestro argumento y el propio argumento event. El $event es una palabra reservada
		por lo que no se debe sobreescribir. Una vez en javascript indicaremos nuestro argumento con la nomenclatura function(argumento, event).
		
		- Si queremos detener un evento en una parte concreta de un elemento html, generamos una funcion que no haga nada y añadimos el metodo event.stopPropagation para que en el elemento general siga funcionando el evento.
		Se puede simplificar añadiendo al elemento html el atributo v-on:evento.stop="", esto evita tener que realizar la funcion anteriormente mencionada.
		
		- Los eventos de teclado funcionan con el atributo "v-on:keyup" si queremos que cualquier tecla pulsada lanze el evento, podemos personalizarlo concatenando con puntos las teclas concretas "v-on:keyup.enter.space"
		
		- Para recoger el valor de una tecla pulsada event.target.value
	
	* Two-way-binding
		- Si a un input le añadimos el atributo v-model, este nos permite rellenarlo con el valor de un parametro de "data", pero si cambiamos el valor de este input tambien estaremos cambiado el valor del parametro de "data".
	
	* ComputedProperties
		Siempre que se lanze un evento en nuestro documento Html, se llamaran a todos los metodos que encontremos en este documento html. Esto puede ser un problema si estos metodos tienen una carga importante de tiempo.
		Esto se puede solucionar utilizando las computedProperties, para ello añadimos un campo nuevo al new Vue, junto el, data y methods
																														computed: {
																															property: function() {
																															}
																														},
		Estas funciones se pueden utilizar como si fueran un parametro mas de "data", pero tienen la ventaja de que solo se lanzan cuando la recarga del html afecte a algun parametro que sea utilizado en esa funcion, evitando
		relanzar la funcion cuando no sea necesario.
		Siempre necesita sincronizidad.
	* Watch
		La alternativa a las computed properties son los watch, estos si que pueden funcionar de manera asincrona, se añade un campo nuevo al new Vue
																																		watch: {
																																			property: function(value) {
																																			}
																																		},
		Estos funcionan de manera inversa a las computed properties, esperan que la propiedad cambie para lanzar el metodo llamado como ella.
	